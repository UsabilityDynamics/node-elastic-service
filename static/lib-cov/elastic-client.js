/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['elastic-client.js']) {
  _$jscoverage['elastic-client.js'] = [];
  _$jscoverage['elastic-client.js'][9] = 0;
  _$jscoverage['elastic-client.js'][12] = 0;
  _$jscoverage['elastic-client.js'][15] = 0;
  _$jscoverage['elastic-client.js'][16] = 0;
  _$jscoverage['elastic-client.js'][19] = 0;
  _$jscoverage['elastic-client.js'][20] = 0;
  _$jscoverage['elastic-client.js'][23] = 0;
  _$jscoverage['elastic-client.js'][26] = 0;
  _$jscoverage['elastic-client.js'][30] = 0;
  _$jscoverage['elastic-client.js'][33] = 0;
  _$jscoverage['elastic-client.js'][35] = 0;
  _$jscoverage['elastic-client.js'][39] = 0;
  _$jscoverage['elastic-client.js'][41] = 0;
  _$jscoverage['elastic-client.js'][44] = 0;
  _$jscoverage['elastic-client.js'][49] = 0;
  _$jscoverage['elastic-client.js'][53] = 0;
  _$jscoverage['elastic-client.js'][54] = 0;
  _$jscoverage['elastic-client.js'][63] = 0;
  _$jscoverage['elastic-client.js'][64] = 0;
  _$jscoverage['elastic-client.js'][96] = 0;
  _$jscoverage['elastic-client.js'][97] = 0;
  _$jscoverage['elastic-client.js'][100] = 0;
  _$jscoverage['elastic-client.js'][102] = 0;
  _$jscoverage['elastic-client.js'][109] = 0;
  _$jscoverage['elastic-client.js'][123] = 0;
  _$jscoverage['elastic-client.js'][126] = 0;
  _$jscoverage['elastic-client.js'][129] = 0;
  _$jscoverage['elastic-client.js'][130] = 0;
  _$jscoverage['elastic-client.js'][133] = 0;
  _$jscoverage['elastic-client.js'][135] = 0;
  _$jscoverage['elastic-client.js'][137] = 0;
  _$jscoverage['elastic-client.js'][140] = 0;
  _$jscoverage['elastic-client.js'][142] = 0;
  _$jscoverage['elastic-client.js'][147] = 0;
  _$jscoverage['elastic-client.js'][152] = 0;
  _$jscoverage['elastic-client.js'][156] = 0;
  _$jscoverage['elastic-client.js'][161] = 0;
  _$jscoverage['elastic-client.js'][164] = 0;
  _$jscoverage['elastic-client.js'][167] = 0;
  _$jscoverage['elastic-client.js'][172] = 0;
  _$jscoverage['elastic-client.js'][174] = 0;
  _$jscoverage['elastic-client.js'][182] = 0;
  _$jscoverage['elastic-client.js'][184] = 0;
  _$jscoverage['elastic-client.js'][187] = 0;
  _$jscoverage['elastic-client.js'][188] = 0;
  _$jscoverage['elastic-client.js'][192] = 0;
  _$jscoverage['elastic-client.js'][197] = 0;
  _$jscoverage['elastic-client.js'][199] = 0;
  _$jscoverage['elastic-client.js'][201] = 0;
  _$jscoverage['elastic-client.js'][203] = 0;
  _$jscoverage['elastic-client.js'][212] = 0;
  _$jscoverage['elastic-client.js'][223] = 0;
  _$jscoverage['elastic-client.js'][224] = 0;
  _$jscoverage['elastic-client.js'][228] = 0;
  _$jscoverage['elastic-client.js'][231] = 0;
}
_$jscoverage['elastic-client.js'][9]++;
require("abstract").createModel((function ElasticClient(ElasticClient, prototype) {
  _$jscoverage['elastic-client.js'][12]++;
  module.exports = ElasticClient;
  _$jscoverage['elastic-client.js'][15]++;
  ElasticClient.use(require("async"));
  _$jscoverage['elastic-client.js'][16]++;
  ElasticClient.use(require("abstract").utility("flatten_obj", "json", "defaults"));
  _$jscoverage['elastic-client.js'][19]++;
  var fs = require("fs");
  _$jscoverage['elastic-client.js'][20]++;
  var elastical = require("elastical");
  _$jscoverage['elastic-client.js'][23]++;
  ElasticClient.defineProperties(ElasticClient, {utility: require("./utility"), debug: require("debug")("elastic-client"), stop: {get: (function () {
  _$jscoverage['elastic-client.js'][26]++;
  return ElasticClient.prototype.stop;
})}});
  _$jscoverage['elastic-client.js'][30]++;
  ElasticClient.defineProperties(prototype, {startup: (function startup(error, report) {
  _$jscoverage['elastic-client.js'][33]++;
  var self = this;
  _$jscoverage['elastic-client.js'][35]++;
  this._client = new elastical.Client();
  _$jscoverage['elastic-client.js'][39]++;
  this._client.stats((function (data) {
  _$jscoverage['elastic-client.js'][41]++;
  self.stats = data;
}));
  _$jscoverage['elastic-client.js'][44]++;
  return this;
}), index: (function index(index, type, doc, options, callback) {
  _$jscoverage['elastic-client.js'][49]++;
  console.log("We gettin'n request 'n shit ");
  _$jscoverage['elastic-client.js'][53]++;
  this._client.index(index, type, doc, callback);
  _$jscoverage['elastic-client.js'][54]++;
  return this;
}), delete: (function get(index, type, id, options, callback) {
  _$jscoverage['elastic-client.js'][63]++;
  this.client["delete"].apply(this, arguments);
  _$jscoverage['elastic-client.js'][64]++;
  return this;
})});
  _$jscoverage['elastic-client.js'][96]++;
  ElasticClient.defineConstructor((function create(binary, options) {
  _$jscoverage['elastic-client.js'][97]++;
  var self = this;
  _$jscoverage['elastic-client.js'][100]++;
  self.use(require("eventemitter2").EventEmitter2.prototype);
  _$jscoverage['elastic-client.js'][102]++;
  require("eventemitter2").EventEmitter2.call(self, {maxListeners: Infinity, wildcard: true, delimiter: "."});
  _$jscoverage['elastic-client.js'][109]++;
  self.set("settings", ElasticClient.defaults(options, {path: {data: undefined, work: undefined, logs: undefined}, cluster: {name: undefined}, http: {port: 9200}}));
  _$jscoverage['elastic-client.js'][123]++;
  self.set("binary", binary);
  _$jscoverage['elastic-client.js'][126]++;
  self.auto({options: [(function options(next, report) {
  _$jscoverage['elastic-client.js'][129]++;
  if ("object" !== typeof self.get("settings.path")) {
    _$jscoverage['elastic-client.js'][130]++;
    return next(null, self.get("settings"));
  }
  _$jscoverage['elastic-client.js'][133]++;
  for (var path in self.get("settings.path")) {
    _$jscoverage['elastic-client.js'][135]++;
    var resolved_path;
    _$jscoverage['elastic-client.js'][137]++;
    var set_path = self.get("settings.path")[path];
    _$jscoverage['elastic-client.js'][140]++;
    try {
      _$jscoverage['elastic-client.js'][142]++;
      resolved_path = fs.realpathSync(set_path);
    }
    catch (error) {
      _$jscoverage['elastic-client.js'][147]++;
      ElasticClient.debug(error);
    }
    _$jscoverage['elastic-client.js'][152]++;
    self.set("settings.path." + path, resolved_path || undefined);
}
  _$jscoverage['elastic-client.js'][156]++;
  next(null, self.get("settings") || {});
})], binary: ["options", (function binary(next, report) {
  _$jscoverage['elastic-client.js'][161]++;
  try {
    _$jscoverage['elastic-client.js'][164]++;
    self.set("binary", fs.realpathSync(self.get("binary")));
    _$jscoverage['elastic-client.js'][167]++;
    return next(null, self.get("binary"));
  }
  catch (error) {
    _$jscoverage['elastic-client.js'][172]++;
    require("which")("elasticsearch", (function which(error, found_path) {
  _$jscoverage['elastic-client.js'][174]++;
  next(error, found_path);
}));
  }
})], process: ["binary", (function process(next, report) {
  _$jscoverage['elastic-client.js'][182]++;
  var arg_props = self.flatten_obj(report.options);
  _$jscoverage['elastic-client.js'][184]++;
  var args = ["-f"];
  _$jscoverage['elastic-client.js'][187]++;
  Object.keys(arg_props).forEach((function (key) {
  _$jscoverage['elastic-client.js'][188]++;
  args.push(["-Des.", key, "=", arg_props[key]].join(""));
}));
  _$jscoverage['elastic-client.js'][192]++;
  report.process = require("child_process").spawn(report.binary, args, {detached: false});
  _$jscoverage['elastic-client.js'][197]++;
  report.process.stdout.on("data", (function (data) {
  _$jscoverage['elastic-client.js'][199]++;
  var data = require("elastic-client").json.parse(data);
  _$jscoverage['elastic-client.js'][201]++;
  if ("object" !== typeof data) {
    _$jscoverage['elastic-client.js'][203]++;
    data = {category: "_error_", data: data, type: "_error_"};
  }
  _$jscoverage['elastic-client.js'][212]++;
  self.emit(data.category, {category: data.category, data: data.data, type: data.type, thread: data.thread, date: data.date});
}));
  _$jscoverage['elastic-client.js'][223]++;
  report.process.stderr.on("data", (function (data) {
  _$jscoverage['elastic-client.js'][224]++;
  self.emit("process.error", require("elastic-client").json.parse(data));
}));
  _$jscoverage['elastic-client.js'][228]++;
  self.set("pid", report.process.pid);
  _$jscoverage['elastic-client.js'][231]++;
  next(! self.get("pid")? new Error("Could not spawn process, no PID returned."): null, report.process || null);
})]}, this.startup.bind(this));
}));
}));
_$jscoverage['elastic-client.js'].source = ["/**"," * ElasticClient"," *"," *"," *"," * @todo Replace eventemitter2 with object-channel once namespacing is ready."," *"," */","require( 'abstract' ).createModel( function ElasticClient( ElasticClient, prototype ) {","","  // Expose Model","  module.exports = ElasticClient;","","  // Use async, Object Channel (EventEmitter) and select Abstract utility methods","  ElasticClient.use( require( 'async' ) );","  ElasticClient.use( require( 'abstract' ).utility( 'flatten_obj', 'json', 'defaults' ) );","","  // Local Modules","  var fs = require( 'fs' );","  var elastical = require( 'elastical' );","","  // Properties: Constructor","  ElasticClient.defineProperties( ElasticClient, {","    utility: require( './utility' ),","    debug: require( 'debug' )( 'elastic-client' ),","    stop: { get: function() { return ElasticClient.prototype.stop } }","  });","","  // Properties: Instance","  ElasticClient.defineProperties( prototype, {","","    startup: function startup( error, report ) {","      var self = this;","","      this._client = new elastical.Client( /*this.get('settings.host', 'http://localhost'), {","        port: this.get('settings.http.port')","      } */);","","      this._client.stats( function( data ) {","//  console.log( data );","        self.stats = data;","      });","","      return this;","    },","","","    index: function index( index, type, doc, options, callback) {","      console.log( 'We gettin\\'n request \\'n shit ');","","     //console.log( this._client.index );","","      this._client.index( index, type, doc, callback );","      return this;","    },","","//    get: function get( index, id, options, callback) {","//      this.client.get.apply( this, arguments) ;","//      return this;","//    },","","    delete: function get( index, type, id, options, callback ) {","      this.client.delete.apply( this, arguments);","      return this;","    }","/*","    search: function search() {","      this.client.search.apply( this, arguments );","      return this;","    },","    bulk: function bulk() {","      this.client.bulk.apply( this.client, arguments );","      return this;","    },","    stop: function stop( pid ) {","","      // @todo Should issue stop command via REST call.","","      var pid = pid || ( this.get ? this.get( 'pid' ) : undefined );","","      // Emit Kill Event","      if( !pid ) {","        return this.emit ? this.emit( 'node.stopped', new Error( 'ElasticSearch process with pid [', pid ,'] not found.' ) ) : this;","      }","","      // Kill the process","      process.kill( pid );","","      // Return self","      return this;","    }"," */","  });","","  // Constructor","  ElasticClient.defineConstructor( function create( binary, options ) {","    var self = this;","","    // Instance Resources","    self.use( require( 'eventemitter2' ).EventEmitter2.prototype );","","    require( 'eventemitter2' ).EventEmitter2.call( self, {","      maxListeners: Infinity,","      wildcard: true,","      delimiter: '.'","    });","","    // Set Options with Defaults","    self.set( 'settings', ElasticClient.defaults( options, {","      path: {","        data: undefined,","        work: undefined,","        logs: undefined","      },","      cluster: {","        name: undefined","      },","      http: {","        port: 9200","      }","    }));","","    self.set( 'binary', binary );","","    // Begin Startup","    self.auto({","      options: [ function options( next, report ) {","","        if( 'object' !== typeof self.get( 'settings.path' ) ) {","          return next( null, self.get( 'settings' ) )","        }","","        for( var path in self.get( 'settings.path' ) ) {","","          var resolved_path;","","          var set_path = self.get( 'settings.path' )[ path ];","","          // Resolve other paths","          try {","","            resolved_path = fs.realpathSync( set_path );","","          } catch( error ) {","","            // This doesn't seem to do anything.","            ElasticClient.debug( error );","","          }","","          // Update path in settings","          self.set( 'settings.path.' + path, resolved_path || undefined );","","        }","","        next( null, self.get( 'settings' ) || {} );","","      }],","      binary: [ 'options', function binary( next, report ) {","","        try {","","          // Resolve path","          self.set( 'binary', fs.realpathSync( self.get( 'binary' ) ) );","","          // We have fully resolved path.","          return next( null, self.get( 'binary' ) );","","        } catch( error ) {","","          // Try to automatically locate the ES","          require( 'which' )( 'elasticsearch', function which( error, found_path ) {","","            next( error, found_path );","","          });","","        }","      }],","      process: [ 'binary', function process( next, report ) {","","        var arg_props = self.flatten_obj( report.options );","","        var args = [ '-f' ];","","        // Command Arguments.","        Object.keys( arg_props ).forEach( function( key ) {","          args.push( [ '-Des.', key, '=', arg_props[ key ] ].join( '' ) );","        });","","        // Spawn process and bind listeners","        report.process = require( 'child_process' ).spawn( report.binary, args, {","          detached: false","        });","","        // Try to parse JSON, Output Data","        report.process.stdout.on( 'data', function( data ) {","","          var data = require( 'elastic-client' ).json.parse( data );","","          if( 'object' !== typeof data ) {","","            data = {","              category: '_error_',","              data: data,","              type: '_error_'","            }","","          }","","          // Parse Log Stream","          self.emit( data.category, {","            category: data.category,","            data: data.data,","            type: data.type,","            thread: data.thread,","            date: data.date","          });","","        });","","        // Try to parse JSON, Output Error","        report.process.stderr.on( 'data', function( data ) {","          self.emit( 'process.error', require( 'elastic-client' ).json.parse( data ) );","        });","","        // Set PID","        self.set( 'pid', report.process.pid );","","        // Done","        next( !self.get( 'pid' ) ? new Error( 'Could not spawn process, no PID returned.' ) : null, report.process || null );","","      }]","    }, this.startup.bind( this ) );","","  });","","});"];
