/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['elastic-client.js']) {
  _$jscoverage['elastic-client.js'] = [];
  _$jscoverage['elastic-client.js'][9] = 0;
  _$jscoverage['elastic-client.js'][12] = 0;
  _$jscoverage['elastic-client.js'][15] = 0;
  _$jscoverage['elastic-client.js'][16] = 0;
  _$jscoverage['elastic-client.js'][19] = 0;
  _$jscoverage['elastic-client.js'][22] = 0;
  _$jscoverage['elastic-client.js'][25] = 0;
  _$jscoverage['elastic-client.js'][29] = 0;
  _$jscoverage['elastic-client.js'][31] = 0;
  _$jscoverage['elastic-client.js'][33] = 0;
  _$jscoverage['elastic-client.js'][34] = 0;
  _$jscoverage['elastic-client.js'][35] = 0;
  _$jscoverage['elastic-client.js'][38] = 0;
  _$jscoverage['elastic-client.js'][42] = 0;
  _$jscoverage['elastic-client.js'][43] = 0;
  _$jscoverage['elastic-client.js'][46] = 0;
  _$jscoverage['elastic-client.js'][47] = 0;
  _$jscoverage['elastic-client.js'][51] = 0;
  _$jscoverage['elastic-client.js'][54] = 0;
  _$jscoverage['elastic-client.js'][55] = 0;
  _$jscoverage['elastic-client.js'][59] = 0;
  _$jscoverage['elastic-client.js'][62] = 0;
  _$jscoverage['elastic-client.js'][68] = 0;
  _$jscoverage['elastic-client.js'][69] = 0;
  _$jscoverage['elastic-client.js'][72] = 0;
  _$jscoverage['elastic-client.js'][73] = 0;
  _$jscoverage['elastic-client.js'][76] = 0;
  _$jscoverage['elastic-client.js'][92] = 0;
  _$jscoverage['elastic-client.js'][96] = 0;
  _$jscoverage['elastic-client.js'][97] = 0;
  _$jscoverage['elastic-client.js'][100] = 0;
  _$jscoverage['elastic-client.js'][103] = 0;
  _$jscoverage['elastic-client.js'][104] = 0;
  _$jscoverage['elastic-client.js'][107] = 0;
  _$jscoverage['elastic-client.js'][110] = 0;
  _$jscoverage['elastic-client.js'][114] = 0;
  _$jscoverage['elastic-client.js'][120] = 0;
  _$jscoverage['elastic-client.js'][121] = 0;
  _$jscoverage['elastic-client.js'][122] = 0;
  _$jscoverage['elastic-client.js'][125] = 0;
  _$jscoverage['elastic-client.js'][126] = 0;
  _$jscoverage['elastic-client.js'][132] = 0;
  _$jscoverage['elastic-client.js'][135] = 0;
  _$jscoverage['elastic-client.js'][136] = 0;
  _$jscoverage['elastic-client.js'][140] = 0;
  _$jscoverage['elastic-client.js'][145] = 0;
  _$jscoverage['elastic-client.js'][146] = 0;
  _$jscoverage['elastic-client.js'][150] = 0;
  _$jscoverage['elastic-client.js'][151] = 0;
  _$jscoverage['elastic-client.js'][154] = 0;
  _$jscoverage['elastic-client.js'][155] = 0;
  _$jscoverage['elastic-client.js'][159] = 0;
  _$jscoverage['elastic-client.js'][162] = 0;
}
_$jscoverage['elastic-client.js'][9]++;
require("abstract").createModel((function ElasticClient(ElasticClient, prototype) {
  _$jscoverage['elastic-client.js'][12]++;
  module.exports = ElasticClient;
  _$jscoverage['elastic-client.js'][15]++;
  ElasticClient.use(require("async"));
  _$jscoverage['elastic-client.js'][16]++;
  ElasticClient.use(require("abstract").utility("defaults"));
  _$jscoverage['elastic-client.js'][19]++;
  var fs = require("fs");
  _$jscoverage['elastic-client.js'][22]++;
  ElasticClient.defineProperties(ElasticClient, {utility: require("./utility"), debug: require("debug")("elastic-client"), stop: {get: (function () {
  _$jscoverage['elastic-client.js'][25]++;
  return ElasticClient.prototype.stop;
})}});
  _$jscoverage['elastic-client.js'][29]++;
  ElasticClient.defineProperties(prototype, {startup: (function startup(error, report) {
  _$jscoverage['elastic-client.js'][31]++;
  var self = this;
  _$jscoverage['elastic-client.js'][33]++;
  ElasticClient.nextTick((function () {
  _$jscoverage['elastic-client.js'][34]++;
  self.emit("node.started", error, report);
  _$jscoverage['elastic-client.js'][35]++;
  if (error) {
    _$jscoverage['elastic-client.js'][35]++;
    self.emit("error", error);
  }
}));
  _$jscoverage['elastic-client.js'][38]++;
  return this;
}), search: (function search() {
  _$jscoverage['elastic-client.js'][42]++;
  this.client.search.apply(this, arguments);
  _$jscoverage['elastic-client.js'][43]++;
  return this;
}), bulk: (function bulk() {
  _$jscoverage['elastic-client.js'][46]++;
  this.client.bulk.apply(this.client, arguments);
  _$jscoverage['elastic-client.js'][47]++;
  return this;
}), stop: (function stop(pid) {
  _$jscoverage['elastic-client.js'][51]++;
  var pid = pid || (this.get? this.get("pid"): undefined);
  _$jscoverage['elastic-client.js'][54]++;
  if (! pid) {
    _$jscoverage['elastic-client.js'][55]++;
    return this.emit? this.emit("node.stopped", new Error("ElasticSearch process with pid [", pid, "] not found.")): this;
  }
  _$jscoverage['elastic-client.js'][59]++;
  process.kill(pid);
  _$jscoverage['elastic-client.js'][62]++;
  return this;
})});
  _$jscoverage['elastic-client.js'][68]++;
  ElasticClient.defineInstance((function Consruct(options) {
  _$jscoverage['elastic-client.js'][69]++;
  var self = this;
  _$jscoverage['elastic-client.js'][72]++;
  self.use(require("eventemitter2").EventEmitter2.prototype);
  _$jscoverage['elastic-client.js'][73]++;
  self.use(require("elastical"));
  _$jscoverage['elastic-client.js'][76]++;
  self.set("settings", ElasticClient.defaults(options, {path: {bin: undefined, data: undefined, work: undefined, logs: undefined}, cluster: {name: undefined}, http: {port: 8000}}));
  _$jscoverage['elastic-client.js'][92]++;
  self.auto({options: [(function options(next, report) {
  _$jscoverage['elastic-client.js'][96]++;
  if ("object" !== typeof self.get("settings.path")) {
    _$jscoverage['elastic-client.js'][97]++;
    return next(null, self.get("settings"));
  }
  _$jscoverage['elastic-client.js'][100]++;
  for (var path in self.get("settings.path")) {
    _$jscoverage['elastic-client.js'][103]++;
    var resolved_path;
    _$jscoverage['elastic-client.js'][104]++;
    var set_path = self.get("settings.path")[path];
    _$jscoverage['elastic-client.js'][107]++;
    try {
      _$jscoverage['elastic-client.js'][107]++;
      resolved_path = fs.realpathSync(set_path);
    }
    catch (error) {
      _$jscoverage['elastic-client.js'][107]++;
      ElasticClient.debug(error);
    }
    _$jscoverage['elastic-client.js'][110]++;
    self.set("settings.path." + path, resolved_path || undefined);
}
  _$jscoverage['elastic-client.js'][114]++;
  next(null, self.get("settings") || {});
})], binary: ["options", (function binary(next, report) {
  _$jscoverage['elastic-client.js'][120]++;
  if (report.options.path.bin && fs.existsSync(report.options.path.bin)) {
    _$jscoverage['elastic-client.js'][121]++;
    return next(null, fs.realpathSync(report.options.path.bin));
  }
  _$jscoverage['elastic-client.js'][122]++;
  ;
  _$jscoverage['elastic-client.js'][125]++;
  require("which")("elasticsearch", (function which(error, found_path) {
  _$jscoverage['elastic-client.js'][126]++;
  next(error, found_path);
}));
})], process: ["binary", (function process(next, report) {
  _$jscoverage['elastic-client.js'][132]++;
  var args = ["-f"];
  _$jscoverage['elastic-client.js'][135]++;
  Object.keys(report.options).forEach((function (key) {
  _$jscoverage['elastic-client.js'][136]++;
  args.push(["-Des.", key, "=", report.options[key]].join(""));
}));
  _$jscoverage['elastic-client.js'][140]++;
  report.process = require("child_process").spawn(report.binary, args, {detached: false});
  _$jscoverage['elastic-client.js'][145]++;
  self.on("stdin.data", (function (data) {
  _$jscoverage['elastic-client.js'][146]++;
  report.process.stdin.write(data);
}));
  _$jscoverage['elastic-client.js'][150]++;
  report.process.stdout.on("data", (function (data) {
  _$jscoverage['elastic-client.js'][151]++;
  self.emit("process.data", data.toString());
}));
  _$jscoverage['elastic-client.js'][154]++;
  report.process.stdout.on("error", (function (data) {
  _$jscoverage['elastic-client.js'][155]++;
  self.emit("process.error", data.toString());
}));
  _$jscoverage['elastic-client.js'][159]++;
  self.set("pid", report.process.pid);
  _$jscoverage['elastic-client.js'][162]++;
  next(! self.get("pid")? new Error("Could now spawn process, no PID returned."): null, report.process || null);
})]}, this.startup.bind(this));
}));
}));
_$jscoverage['elastic-client.js'].source = ["/**"," * ElasticClient"," *"," *"," *"," * @todo Replace eventemitter2 with object-channel once namespacing is ready."," *"," */","require( 'abstract' ).createModel( function ElasticClient( ElasticClient, prototype ) {","","  // Expose Model","  module.exports = ElasticClient;","","  // Use async, Object Channel (EventEmitter) and select Abstract utility methods","  ElasticClient.use( require( 'async' ) );","  ElasticClient.use( require( 'abstract' ).utility( 'defaults' ) );","","  // Local Modules","  var fs = require( 'fs' );","","  // Properties: Constructor","  ElasticClient.defineProperties( ElasticClient, {","    utility: require( './utility' ),","    debug: require( 'debug' )( 'elastic-client' ),","    stop: { get: function() { return ElasticClient.prototype.stop } }","  });","","  // Properties: Instance","  ElasticClient.defineProperties( prototype, {","    startup: function startup( error, report ) {","      var self = this;","","      ElasticClient.nextTick( function() {","        self.emit( 'node.started', error, report );","        if( error ) { self.emit( 'error', error ); }","      });","","      return this;","","    },","    search: function search() {","      this.client.search.apply( this, arguments );","      return this;","    },","    bulk: function bulk() {","      this.client.bulk.apply( this.client, arguments );","      return this;","    },","    stop: function stop( pid ) {","","      var pid = pid || ( this.get ? this.get( 'pid' ) : undefined );","","      // Emit Kill Event","      if( !pid ) {","        return this.emit ? this.emit( 'node.stopped', new Error( 'ElasticSearch process with pid [', pid ,'] not found.' ) ) : this;","      }","","      // Kill the process","      process.kill( pid );","","      // Return self","      return this;","","    }","  });","","  // Constructor","  ElasticClient.defineInstance( function Consruct( options ) {","    var self = this;","","    // Instance Resources","    self.use( require( 'eventemitter2' ).EventEmitter2.prototype );","    self.use( require( 'elastical' ) );","","    // Set Options with Defaults","    self.set( 'settings', ElasticClient.defaults( options, {","      path: {","        bin: undefined,","        data: undefined,","        work: undefined,","        logs: undefined,","      },","      cluster: {","        name: undefined","      },","      http: {","        port: 8000","      }","    }));","","    // Begin Startup","    self.auto({","      options: [ function options( next, report ) {","","        // No Paths","        if( 'object' !== typeof self.get( 'settings.path' ) ) {","          return next( null, self.get( 'settings' ) )","        }","","        for( var path in self.get( 'settings.path' ) ) {","","          // @todo There is a bug with resolving paths.","          var resolved_path;","          var set_path = self.get( 'settings.path' )[ path ];","","          // Resolve path","          try { resolved_path = fs.realpathSync( set_path ); } catch( error ) { ElasticClient.debug( error ); }","","          // Update path in settings","          self.set( 'settings.path.' + path, resolved_path || undefined );","","        }","","        next( null, self.get( 'settings' ) || {} );","","      }],","      binary: [ 'options', function binary( next, report ) {","","        // If path to ES is specified, resolve and return","        if( report.options.path.bin &amp;&amp; fs.existsSync( report.options.path.bin ) ) {","          return next( null, fs.realpathSync( report.options.path.bin ) )","        };","","        // Try to find global self","        require( 'which' )( 'elasticsearch', function which( error, found_path ) {","          next( error, found_path );","        });","","      }],","      process: [ 'binary', function process( next, report ) {","","        var args = [ '-f' ];","","        // Command Arguments.","        Object.keys( report.options ).forEach( function( key ) {","          args.push( [ '-Des.', key, '=', report.options[ key ] ].join( '' ) );","        });","","        // Spawn process and bind listeners","        report.process = require( 'child_process' ).spawn( report.binary, args, {","          detached: false","        });","","        // Input Data","        self.on( 'stdin.data', function( data ) {","          report.process.stdin.write( data );","        });","","        // Output Data and Error","        report.process.stdout.on( 'data', function( data ) {","          self.emit( 'process.data', data.toString() );","        });","","        report.process.stdout.on( 'error', function( data ) {","          self.emit( 'process.error', data.toString() );","        });","","        // Set PID","        self.set( 'pid', report.process.pid );","","        // Done","        next( !self.get( 'pid' ) ? new Error( 'Could now spawn process, no PID returned.' ) : null, report.process || null );","","      }]","    }, this.startup.bind( this ) );","","  });","","});"];
