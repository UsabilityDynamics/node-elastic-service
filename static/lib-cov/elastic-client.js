/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['elastic-client.js']) {
  _$jscoverage['elastic-client.js'] = [];
  _$jscoverage['elastic-client.js'][22] = 0;
  _$jscoverage['elastic-client.js'][26] = 0;
  _$jscoverage['elastic-client.js'][27] = 0;
  _$jscoverage['elastic-client.js'][28] = 0;
  _$jscoverage['elastic-client.js'][31] = 0;
  _$jscoverage['elastic-client.js'][99] = 0;
  _$jscoverage['elastic-client.js'][100] = 0;
  _$jscoverage['elastic-client.js'][111] = 0;
  _$jscoverage['elastic-client.js'][112] = 0;
  _$jscoverage['elastic-client.js'][127] = 0;
  _$jscoverage['elastic-client.js'][129] = 0;
  _$jscoverage['elastic-client.js'][132] = 0;
  _$jscoverage['elastic-client.js'][134] = 0;
  _$jscoverage['elastic-client.js'][135] = 0;
  _$jscoverage['elastic-client.js'][141] = 0;
  _$jscoverage['elastic-client.js'][143] = 0;
  _$jscoverage['elastic-client.js'][144] = 0;
  _$jscoverage['elastic-client.js'][149] = 0;
  _$jscoverage['elastic-client.js'][168] = 0;
  _$jscoverage['elastic-client.js'][171] = 0;
  _$jscoverage['elastic-client.js'][172] = 0;
  _$jscoverage['elastic-client.js'][176] = 0;
  _$jscoverage['elastic-client.js'][177] = 0;
  _$jscoverage['elastic-client.js'][181] = 0;
  _$jscoverage['elastic-client.js'][198] = 0;
  _$jscoverage['elastic-client.js'][201] = 0;
  _$jscoverage['elastic-client.js'][204] = 0;
  _$jscoverage['elastic-client.js'][207] = 0;
  _$jscoverage['elastic-client.js'][217] = 0;
  _$jscoverage['elastic-client.js'][222] = 0;
  _$jscoverage['elastic-client.js'][224] = 0;
  _$jscoverage['elastic-client.js'][227] = 0;
  _$jscoverage['elastic-client.js'][228] = 0;
  _$jscoverage['elastic-client.js'][229] = 0;
  _$jscoverage['elastic-client.js'][233] = 0;
  _$jscoverage['elastic-client.js'][237] = 0;
  _$jscoverage['elastic-client.js'][239] = 0;
  _$jscoverage['elastic-client.js'][240] = 0;
  _$jscoverage['elastic-client.js'][243] = 0;
  _$jscoverage['elastic-client.js'][244] = 0;
  _$jscoverage['elastic-client.js'][247] = 0;
  _$jscoverage['elastic-client.js'][248] = 0;
  _$jscoverage['elastic-client.js'][251] = 0;
  _$jscoverage['elastic-client.js'][253] = 0;
  _$jscoverage['elastic-client.js'][260] = 0;
  _$jscoverage['elastic-client.js'][261] = 0;
  _$jscoverage['elastic-client.js'][262] = 0;
  _$jscoverage['elastic-client.js'][265] = 0;
  _$jscoverage['elastic-client.js'][266] = 0;
  _$jscoverage['elastic-client.js'][270] = 0;
  _$jscoverage['elastic-client.js'][277] = 0;
  _$jscoverage['elastic-client.js'][278] = 0;
  _$jscoverage['elastic-client.js'][282] = 0;
  _$jscoverage['elastic-client.js'][287] = 0;
  _$jscoverage['elastic-client.js'][290] = 0;
  _$jscoverage['elastic-client.js'][291] = 0;
  _$jscoverage['elastic-client.js'][294] = 0;
  _$jscoverage['elastic-client.js'][297] = 0;
  _$jscoverage['elastic-client.js'][301] = 0;
  _$jscoverage['elastic-client.js'][302] = 0;
  _$jscoverage['elastic-client.js'][303] = 0;
  _$jscoverage['elastic-client.js'][308] = 0;
  _$jscoverage['elastic-client.js'][316] = 0;
  _$jscoverage['elastic-client.js'][359] = 0;
  _$jscoverage['elastic-client.js'][360] = 0;
  _$jscoverage['elastic-client.js'][371] = 0;
  _$jscoverage['elastic-client.js'][372] = 0;
  _$jscoverage['elastic-client.js'][387] = 0;
  _$jscoverage['elastic-client.js'][389] = 0;
  _$jscoverage['elastic-client.js'][392] = 0;
  _$jscoverage['elastic-client.js'][394] = 0;
  _$jscoverage['elastic-client.js'][395] = 0;
  _$jscoverage['elastic-client.js'][401] = 0;
  _$jscoverage['elastic-client.js'][403] = 0;
  _$jscoverage['elastic-client.js'][404] = 0;
  _$jscoverage['elastic-client.js'][409] = 0;
  _$jscoverage['elastic-client.js'][428] = 0;
  _$jscoverage['elastic-client.js'][431] = 0;
  _$jscoverage['elastic-client.js'][432] = 0;
  _$jscoverage['elastic-client.js'][436] = 0;
  _$jscoverage['elastic-client.js'][437] = 0;
  _$jscoverage['elastic-client.js'][441] = 0;
  _$jscoverage['elastic-client.js'][458] = 0;
  _$jscoverage['elastic-client.js'][461] = 0;
  _$jscoverage['elastic-client.js'][464] = 0;
  _$jscoverage['elastic-client.js'][467] = 0;
  _$jscoverage['elastic-client.js'][480] = 0;
  _$jscoverage['elastic-client.js'][501] = 0;
  _$jscoverage['elastic-client.js'][502] = 0;
  _$jscoverage['elastic-client.js'][505] = 0;
  _$jscoverage['elastic-client.js'][517] = 0;
}
_$jscoverage['elastic-client.js'][22]++;
function ElasticClient(options) {
  _$jscoverage['elastic-client.js'][26]++;
  var _ = require("lodash");
  _$jscoverage['elastic-client.js'][27]++;
  var fs = require("fs");
  _$jscoverage['elastic-client.js'][28]++;
  var Observe = require("observe.io");
  _$jscoverage['elastic-client.js'][31]++;
  var Instance = Object.create(ElasticClient.prototype, {pid: {value: undefined, enumerable: false, writable: true}, settings: {value: ElasticClient.utility.defaults(options || {}, ElasticClient._defaults || {}), enumerable: false, writable: true}, client: {value: new require("elastical").Client(this.get("host"), {port: this.get("port"), protocol: this.get("protocol"), timeout: 60000, auth: false}), enumerable: false, writable: true}, args: {value: ["-f"], enumerable: false, writable: true}, Document: {value: require("./document"), configurable: false, enumerable: true, writable: false}, Index: {value: require("./index"), configurable: false, enumerable: true, writable: false}, Type: {value: require("./type"), configurable: false, enumerable: true, writable: false}, search: {value: (function search() {
  _$jscoverage['elastic-client.js'][99]++;
  this.client.search.apply(this, arguments);
  _$jscoverage['elastic-client.js'][100]++;
  return this;
}), enumerable: true, writable: true}, bulk: {value: (function bulk() {
  _$jscoverage['elastic-client.js'][111]++;
  this.client.bulk.apply(this.client, arguments);
  _$jscoverage['elastic-client.js'][112]++;
  return this;
}), enumerable: true, writable: true}, get: {value: (function get(key) {
  _$jscoverage['elastic-client.js'][127]++;
  key = key || "hostame";
  _$jscoverage['elastic-client.js'][129]++;
  var options = this.settings || {};
  _$jscoverage['elastic-client.js'][132]++;
  if (key === "host") {
    _$jscoverage['elastic-client.js'][134]++;
    if (options["network.publish_host"]) {
      _$jscoverage['elastic-client.js'][135]++;
      key = "network.publish_host";
    }
  }
  _$jscoverage['elastic-client.js'][141]++;
  if (key === "port") {
    _$jscoverage['elastic-client.js'][143]++;
    if (options["http.port"]) {
      _$jscoverage['elastic-client.js'][144]++;
      key = "http.port";
    }
  }
  _$jscoverage['elastic-client.js'][149]++;
  return options[key] || null;
}), configurable: false, writable: false, enumerable: true}, set: {value: (function set(key, value) {
  _$jscoverage['elastic-client.js'][168]++;
  this.settings = ElasticClient.utility.defaults(this.settings, ElasticClient._defaults);
  _$jscoverage['elastic-client.js'][171]++;
  if ("string" === typeof key) {
    _$jscoverage['elastic-client.js'][172]++;
    this.settings[key] = value? value: this.settings[key] || undefined;
  }
  _$jscoverage['elastic-client.js'][176]++;
  if ("object" === typeof key) {
    _$jscoverage['elastic-client.js'][177]++;
    ElasticClient.utility.extend(this.settings, key);
  }
  _$jscoverage['elastic-client.js'][181]++;
  return this;
}), configurable: false, writable: false, enumerable: true}, stop: {value: (function stop() {
  _$jscoverage['elastic-client.js'][198]++;
  process.kill(this.pid);
  _$jscoverage['elastic-client.js'][201]++;
  delete ElasticClient._data.instances[this.pid];
  _$jscoverage['elastic-client.js'][204]++;
  this.emit("node.stopped");
  _$jscoverage['elastic-client.js'][207]++;
  return this;
}), configurable: false, writable: false, enumerable: true}});
  _$jscoverage['elastic-client.js'][217]++;
  var Emitter = Observe.Emitter.create(arguments.callee.name, {delimiter: ".", maxListeners: 100});
  _$jscoverage['elastic-client.js'][222]++;
  Observe.utility.inherit(Instance, Observe.Emitter.prototype);
  _$jscoverage['elastic-client.js'][224]++;
  console.log(Emitter.emit);
  _$jscoverage['elastic-client.js'][227]++;
  Instance.once("node.started", (function (error, report) {
  _$jscoverage['elastic-client.js'][228]++;
  ElasticClient.logger.debug("Node started with pid [%s]", this.pid);
  _$jscoverage['elastic-client.js'][229]++;
  ElasticClient._data.instances[this.pid] = this;
}));
  _$jscoverage['elastic-client.js'][233]++;
  ElasticClient.async.auto({options: [(function options(next, report) {
  _$jscoverage['elastic-client.js'][237]++;
  try {
    _$jscoverage['elastic-client.js'][239]++;
    if (Instance.settings["path.data"]) {
      _$jscoverage['elastic-client.js'][240]++;
      Instance.settings["path.data"] = fs.realpathSync(Instance.settings["path.data"]);
    }
    _$jscoverage['elastic-client.js'][243]++;
    if (Instance.settings["path.work"]) {
      _$jscoverage['elastic-client.js'][244]++;
      Instance.settings["path.work"] = fs.realpathSync(Instance.settings["path.work"]);
    }
    _$jscoverage['elastic-client.js'][247]++;
    if (Instance.settings["path.logs"]) {
      _$jscoverage['elastic-client.js'][248]++;
      Instance.settings["path.logs"] = fs.realpathSync(Instance.settings["path.logs"]);
    }
  }
  catch (error) {
    _$jscoverage['elastic-client.js'][251]++;
    return next(error);
  }
  _$jscoverage['elastic-client.js'][253]++;
  next(null, Instance.settings);
})], path: ["options", (function path(next, report) {
  _$jscoverage['elastic-client.js'][260]++;
  if (report.options.path && fs.existsSync(report.options.path)) {
    _$jscoverage['elastic-client.js'][261]++;
    return next(null, fs.realpathSync(report.options.path));
  }
  _$jscoverage['elastic-client.js'][262]++;
  ;
  _$jscoverage['elastic-client.js'][265]++;
  require("which")("elasticsearch", (function which(error, found_path) {
  _$jscoverage['elastic-client.js'][266]++;
  next(error, found_path);
}));
  _$jscoverage['elastic-client.js'][270]++;
  next(new Error("ElasticSearch path not specified."));
})], process: ["path", (function process(next, report) {
  _$jscoverage['elastic-client.js'][277]++;
  Object.keys(report.options).forEach((function (key) {
  _$jscoverage['elastic-client.js'][278]++;
  Instance.args.push(["-Des.", key, "=", report.options[key]].join(""));
}));
  _$jscoverage['elastic-client.js'][282]++;
  report.process = require("child_process").spawn(report.path, Instance.args, {detached: false});
  _$jscoverage['elastic-client.js'][287]++;
  Instance.on("stdin.data", (function (data) {
  _$jscoverage['elastic-client.js'][287]++;
  report.process.stdin.write(data);
}));
  _$jscoverage['elastic-client.js'][290]++;
  report.process.stdout.on("data", (function (data) {
  _$jscoverage['elastic-client.js'][290]++;
  Instance.emit("process.data", data.toString());
}));
  _$jscoverage['elastic-client.js'][291]++;
  report.process.stdout.on("error", (function (data) {
  _$jscoverage['elastic-client.js'][291]++;
  Instance.emit("process.error", data.toString());
}));
  _$jscoverage['elastic-client.js'][294]++;
  Instance.pid = report.process.pid;
  _$jscoverage['elastic-client.js'][297]++;
  next(! report.process.pid? new Error("Could now spawn process, no PID returned."): null, report.process || null);
})]}, (function Report(error, report) {
  _$jscoverage['elastic-client.js'][301]++;
  process.nextTick((function () {
  _$jscoverage['elastic-client.js'][302]++;
  Instance.emit("node.started", error, report);
  _$jscoverage['elastic-client.js'][303]++;
  if (error) {
    _$jscoverage['elastic-client.js'][303]++;
    Instance.emit("error", error);
  }
}));
}));
  _$jscoverage['elastic-client.js'][308]++;
  return Instance;
}
_$jscoverage['elastic-client.js'][316]++;
Object.defineProperties(ElasticClient.prototype, {Document: {value: require("./document"), configurable: false, enumerable: true, writable: false}, Index: {value: require("./index"), configurable: false, enumerable: true, writable: false}, Type: {value: require("./type"), configurable: false, enumerable: true, writable: false}, search: {value: (function search() {
  _$jscoverage['elastic-client.js'][359]++;
  this.client.search.apply(this, arguments);
  _$jscoverage['elastic-client.js'][360]++;
  return this;
}), enumerable: true, writable: true}, bulk: {value: (function bulk() {
  _$jscoverage['elastic-client.js'][371]++;
  this.client.bulk.apply(this.client, arguments);
  _$jscoverage['elastic-client.js'][372]++;
  return this;
}), enumerable: true, writable: true}, get: {value: (function get(key) {
  _$jscoverage['elastic-client.js'][387]++;
  key = key || "hostame";
  _$jscoverage['elastic-client.js'][389]++;
  var options = this.settings || {};
  _$jscoverage['elastic-client.js'][392]++;
  if (key === "host") {
    _$jscoverage['elastic-client.js'][394]++;
    if (options["network.publish_host"]) {
      _$jscoverage['elastic-client.js'][395]++;
      key = "network.publish_host";
    }
  }
  _$jscoverage['elastic-client.js'][401]++;
  if (key === "port") {
    _$jscoverage['elastic-client.js'][403]++;
    if (options["http.port"]) {
      _$jscoverage['elastic-client.js'][404]++;
      key = "http.port";
    }
  }
  _$jscoverage['elastic-client.js'][409]++;
  return options[key] || null;
}), configurable: false, writable: false, enumerable: true}, set: {value: (function set(key, value) {
  _$jscoverage['elastic-client.js'][428]++;
  this.settings = ElasticClient.utility.defaults(this.settings, ElasticClient._defaults);
  _$jscoverage['elastic-client.js'][431]++;
  if ("string" === typeof key) {
    _$jscoverage['elastic-client.js'][432]++;
    this.settings[key] = value? value: this.settings[key] || undefined;
  }
  _$jscoverage['elastic-client.js'][436]++;
  if ("object" === typeof key) {
    _$jscoverage['elastic-client.js'][437]++;
    ElasticClient.utility.extend(this.settings, key);
  }
  _$jscoverage['elastic-client.js'][441]++;
  return this;
}), configurable: false, writable: false, enumerable: true}, stop: {value: (function stop() {
  _$jscoverage['elastic-client.js'][458]++;
  process.kill(this.pid);
  _$jscoverage['elastic-client.js'][461]++;
  delete ElasticClient._data.instances[this.pid];
  _$jscoverage['elastic-client.js'][464]++;
  this.emit("node.stopped");
  _$jscoverage['elastic-client.js'][467]++;
  return this;
}), configurable: false, writable: false, enumerable: true}});
_$jscoverage['elastic-client.js'][480]++;
Object.defineProperties(module.exports = ElasticClient, {_data: {value: {defaults: {"http.port": 9600, "network.publish_host": "127.0.0.1", "protocol": "http"}, instances: {}}, enumerable: false, writable: true}, defaults: {value: (function defaults(data) {
  _$jscoverage['elastic-client.js'][501]++;
  if (data) {
    _$jscoverage['elastic-client.js'][502]++;
    ElasticClient._data.defaults = data;
  }
  _$jscoverage['elastic-client.js'][505]++;
  return ElasticClient._data.defaults;
}), enumerable: true, writable: false}, start: {get: (function () {
  _$jscoverage['elastic-client.js'][517]++;
  return (function (options) {
  _$jscoverage['elastic-client.js'][517]++;
  return new ElasticClient(options);
});
}), configurable: true, enumerable: true}, install_plugin: {value: (function install_plugin() {
}), enumerable: true}, remove_plugin: {value: (function remove_plugin() {
}), enumerable: true}, logger: {value: {log: (function log() {
}), error: console.error, info: (function info() {
}), debug: require("debug")("elastic-client")}, configurable: true, writable: true, enumerable: true}, utility: {value: require("./utility"), enumerable: true, writable: false}, async: {value: require("async"), configurable: false, enumerable: false, writable: true}});
_$jscoverage['elastic-client.js'].source = ["/**"," * Elastic Client"," *"," * @module ElasticClient"," * @constructor"," * @async"," * @chainable"," *"," * @author potanin@UD"," * @date 7/4/13"," *"," * @param options {Object} Client settings."," * @param options.node.name {String} Name of instance."," * @param options.cluster.name {String} Name of cluster for instance."," * @param options.network.publish_host {String} Hostname of instance."," * @param options.http.port {Number} Port of instance."," * @param options.index.number_of_shards {Number} Number of shards."," * @param options.index.number_of_replicas {Number} Number of replicas."," *"," * @returns {Object} New ElasticClient instance."," */","function ElasticClient( options ) {","  // ElasticClient.logger.debug( 'Starting.' );","","  // Modules","  var _ = require( 'lodash' );","  var fs = require( 'fs' );","  var Observe = require( 'observe.io' );","","  // Create Instance Properties for Main Module","  var Instance = Object.create( ElasticClient.prototype, {","    pid: {","      value: undefined,","      enumerable: false,","      writable: true","    },","    settings: {","      value: ElasticClient.utility.defaults( options || {}, ElasticClient._defaults || {} ),","      enumerable: false,","      writable: true","    },","    client: {","      value: new ( require( 'elastical' ) ).Client( this.get( 'host' ), {","        port: this.get( 'port' ),","        protocol: this.get( 'protocol' ),","        timeout: 60000,","        auth: false","      }),","      enumerable: false,","      writable: true","    },","    args: {","      value: [ '-f' ],","      enumerable: false,","      writable: true","    },","    Document: {","      /**","       * Get / Update or create a Document","       *","       * @async","       * @chainable","       */","      value: require( './document' ),","      configurable: false,","      enumerable: true,","      writable: false","    },","    Index: {","      /**","       * Get / Update or create an Index","       *","       * @async","       * @chainable","       */","      value: require( './index' ),","      configurable: false,","      enumerable: true,","      writable: false","    },","    Type: {","      /**","       * Type Actions","       *","       * @async","       * @chainable","       */","      value: require( './type' ),","      configurable: false,","      enumerable: true,","      writable: false","    },","    search: {","      /**","       * Search Documents","       *","       */","      value: function search() {","        this.client.search.apply( this, arguments );","        return this;","      },","      enumerable: true,","      writable: true","    },","    bulk: {","      /**","       * Bulk Actions","       *","       */","      value: function bulk() {","        this.client.bulk.apply( this.client, arguments );","        return this;","      },","      enumerable: true,","      writable: true","    },","    get: {","      /**","       * Get Setting","       *","       * @return {} Setting value;","       * @async","       */","      value: function get( key ) {","","        // Delo hostame. Just because.","        key = key || 'hostame';","","        var options = this.settings || {};","","        // Helper for Hostname lookup","        if( key === 'host' ) {","","          if( options[ 'network.publish_host' ] ) {","            key = 'network.publish_host';","          }","","        }","","        // Helper for port lookup","        if( key === 'port' ) {","","          if( options[ 'http.port' ] ) {","            key = 'http.port';","          }","","        }","","        return options[ key ] || null;","","      },","      configurable: false,","      writable: false,","      enumerable: true","    },","    set: {","      /**","       * Set an Option / Options","       *","       * @param key {String}","       * @param value {Any}","       * @return {Object} Instance.","       * @chainable","       */","      value: function set( key, value ) {","","        // Create Container","        this.settings = ElasticClient.utility.defaults( this.settings, ElasticClient._defaults );","","        // Set Key-Value","        if( 'string' === typeof key ) {","          this.settings[ key ] = value ? value : this.settings[ key ] || undefined;","        }","","        // Extend Options using Object","        if( 'object' === typeof key ) {","          ElasticClient.utility.extend( this.settings, key );","        }","","        // Instance","        return this;","","      },","      configurable: false,","      writable: false,","      enumerable: true","    },","    stop: {","      /**","       * Shutdown Instance","       *","       * @chainable","       * @async","       */","      value: function stop() {","","        // Kill the process","        process.kill( this.pid );","","        // Remove from Instance Pool","        delete ElasticClient._data.instances[ this.pid ];","","        // Emit Event","        this.emit( 'node.stopped' );","","        // Return Instance","        return this;","","      },","      configurable: false,","      writable: false,","      enumerable: true","    }","  });","","  // Add Emitter functionality to Instance","  var Emitter = Observe.Emitter.create( arguments.callee.name, {","    delimiter: '.',","    maxListeners: 100","  });","","  Observe.utility.inherit( Instance, Observe.Emitter.prototype );","","  console.log( Emitter.emit );","","  // Monitor successful start","  Instance.once( 'node.started', function( error, report ) {","    ElasticClient.logger.debug( 'Node started with pid [%s]', this.pid );","    ElasticClient._data.instances[ this.pid ] = this;","  })","","  // Start Instance","  ElasticClient.async.auto({","    // Validate and Prepare Options","    options: [ function options( next, report ) {","","      try {","","        if( Instance.settings[ 'path.data' ] ) {","          Instance.settings[ 'path.data' ] = fs.realpathSync( Instance.settings[ 'path.data' ] );","        }","","        if( Instance.settings[ 'path.work' ] ) {","          Instance.settings[ 'path.work' ] = fs.realpathSync( Instance.settings[ 'path.work' ] );","        }","","        if( Instance.settings[ 'path.logs' ] ) {","          Instance.settings[ 'path.logs' ] = fs.realpathSync( Instance.settings[ 'path.logs' ] );","        }","","      } catch( error ) { return next( error ); }","","      next( null, Instance.settings );","","    }],","    // Find Executable Path","    path: [ 'options', function path( next, report ) {","","      // If path to ES is specified, resolve and return","      if( report.options.path &amp;&amp; fs.existsSync( report.options.path ) ) {","        return next( null, fs.realpathSync( report.options.path ) )","      };","","      // Try to find global instance","      require( 'which' )( 'elasticsearch', function which( error, found_path ) {","        next( error, found_path );","      });","","      // Failure","      next( new Error( 'ElasticSearch path not specified.' ) );","","    }],","    // Spawn Process, \"pipe\" Events","    process: [ 'path', function process( next, report ) {","","      // Command Arguments.","      Object.keys( report.options ).forEach( function( key ) {","        Instance.args.push( [ '-Des.', key, '=', report.options[ key ] ].join( '' ) );","      });","","      // Spawn process and bind listeners","      report.process = require( 'child_process' ).spawn( report.path, Instance.args, {","        detached: false","      });","","      // Input Data","      Instance.on( 'stdin.data', function( data ) { report.process.stdin.write( data ); });","","      // Output Data and Error","      report.process.stdout.on( 'data', function( data ) { Instance.emit( 'process.data', data.toString() ); });","      report.process.stdout.on( 'error', function( data ) { Instance.emit( 'process.error', data.toString() ); });","","      // Set PID","      Instance.pid = report.process.pid;","","      // Done","      next( !report.process.pid ? new Error( 'Could now spawn process, no PID returned.' ) : null, report.process || null );","","    }]","  }, function Report( error, report ) {","    process.nextTick( function() {","      Instance.emit( 'node.started', error, report );","      if( error ) { Instance.emit( 'error', error ); }","    });","  });","","  // Return Instance","  return Instance;","","}","","/**"," * Prototyal Properties"," *"," */","Object.defineProperties( ElasticClient.prototype, {","  Document: {","    /**","     * Get / Update or create a Document","     *","     * @async","     * @chainable","     */","    value: require( './document' ),","    configurable: false,","    enumerable: true,","    writable: false","  },","  Index: {","    /**","     * Get / Update or create an Index","     *","     * @async","     * @chainable","     */","    value: require( './index' ),","    configurable: false,","    enumerable: true,","    writable: false","  },","  Type: {","    /**","     * Type Actions","     *","     * @async","     * @chainable","     */","    value: require( './type' ),","    configurable: false,","    enumerable: true,","    writable: false","  },","  search: {","    /**","     * Search Documents","     *","     */","    value: function search() {","      this.client.search.apply( this, arguments );","      return this;","    },","    enumerable: true,","    writable: true","  },","  bulk: {","    /**","     * Bulk Actions","     *","     */","    value: function bulk() {","      this.client.bulk.apply( this.client, arguments );","      return this;","    },","    enumerable: true,","    writable: true","  },","  get: {","    /**","     * Get Setting","     *","     * @return {} Setting value;","     * @async","     */","    value: function get( key ) {","","      // Delo hostame. Just because.","      key = key || 'hostame';","","      var options = this.settings || {};","","      // Helper for Hostname lookup","      if( key === 'host' ) {","","        if( options[ 'network.publish_host' ] ) {","          key = 'network.publish_host';","        }","","      }","","      // Helper for port lookup","      if( key === 'port' ) {","","        if( options[ 'http.port' ] ) {","          key = 'http.port';","        }","","      }","","      return options[ key ] || null;","","    },","    configurable: false,","    writable: false,","    enumerable: true","  },","  set: {","    /**","     * Set an Option / Options","     *","     * @param key {String}","     * @param value {Any}","     * @return {Object} Instance.","     * @chainable","     */","    value: function set( key, value ) {","","      // Create Container","      this.settings = ElasticClient.utility.defaults( this.settings, ElasticClient._defaults );","","      // Set Key-Value","      if( 'string' === typeof key ) {","        this.settings[ key ] = value ? value : this.settings[ key ] || undefined;","      }","","      // Extend Options using Object","      if( 'object' === typeof key ) {","        ElasticClient.utility.extend( this.settings, key );","      }","","      // Instance","      return this;","","    },","    configurable: false,","    writable: false,","    enumerable: true","  },","  stop: {","    /**","     * Shutdown Instance","     *","     * @chainable","     * @async","     */","    value: function stop() {","","      // Kill the process","      process.kill( this.pid );","","      // Remove from Instance Pool","      delete ElasticClient._data.instances[ this.pid ];","","      // Emit Event","      this.emit( 'node.stopped' );","","      // Return Instance","      return this;","","    },","    configurable: false,","    writable: false,","    enumerable: true","  }","})","","/**"," * Constructor Properties"," *"," */","Object.defineProperties( module.exports = ElasticClient, {","  _data: {","    value: {","      defaults: {","        'http.port': 9600,","        'network.publish_host': '127.0.0.1',","        'protocol': 'http'","      },","      instances: {}","    },","    enumerable: false,","    writable: true","  },","  defaults: {","    /**","     * Get / Set Defaults","     *","     * @param data","     */","    value: function defaults( data ) {","","      if( data ) {","        ElasticClient._data.defaults = data;","      }","","      return ElasticClient._data.defaults;","","    },","    enumerable: true,","    writable: false","  },","  start: {","    /**","     * Start ElasticSearch Instance","     *","     * @extends ElasticClient","     */","    get: function() { return function( options ) { return new ElasticClient( options ); }; },","    configurable: true,","    enumerable: true","  },","  install_plugin: {","    value: function install_plugin() {},","    enumerable: true","  },","  remove_plugin: {","    value: function remove_plugin() {},","    enumerable: true","  },","  logger: {","    /**","     * Define Logger","     *","     */","    value: {","      log: function log() {},","      error: console.error,","      info: function info() {},","      debug: require( 'debug' )( 'elastic-client' )","    },","    configurable: true,","    writable: true,","    enumerable: true","  },","  utility: {","    value: require( './utility' ),","    enumerable: true,","    writable: false","  },","  async: {","    value: require( 'async' ),","    configurable: false,","    enumerable: false,","    writable: true","  }","});"];
