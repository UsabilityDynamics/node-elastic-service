/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['document.js']) {
  _$jscoverage['document.js'] = [];
  _$jscoverage['document.js'][15] = 0;
  _$jscoverage['document.js'][17] = 0;
  _$jscoverage['document.js'][20] = 0;
  _$jscoverage['document.js'][39] = 0;
  _$jscoverage['document.js'][42] = 0;
  _$jscoverage['document.js'][45] = 0;
  _$jscoverage['document.js'][53] = 0;
  _$jscoverage['document.js'][81] = 0;
  _$jscoverage['document.js'][94] = 0;
  _$jscoverage['document.js'][103] = 0;
}
_$jscoverage['document.js'][15]++;
function Document(index, type, id) {
  _$jscoverage['document.js'][17]++;
  var Observe = require("observe.io");
  _$jscoverage['document.js'][20]++;
  var Instance = Object.create(this, {_index: {value: index || null, enumerable: true, writable: true}, _type: {value: type || null, enumerable: true, writable: true}, _id: {value: id || null, enumerable: true, writable: true}});
  _$jscoverage['document.js'][39]++;
  Observe.Emitter.extend(Instance, ["Document", index, type, id]);
  _$jscoverage['document.js'][42]++;
  Observe.utility.inherit(Instance, Document.prototype);
  _$jscoverage['document.js'][45]++;
  return Instance;
}
_$jscoverage['document.js'][53]++;
Object.defineProperties(Document.prototype, {commit: {value: (function commit() {
}), configurable: true, enumerable: false, writable: false}, remove: {value: (function remove() {
}), configurable: true, enumerable: false, writable: false}, content: {value: (function content() {
  _$jscoverage['document.js'][81]++;
  console.log(this);
}), configurable: true, enumerable: false, writable: false}});
_$jscoverage['document.js'][94]++;
Object.defineProperties(module.exports = Document, {create: {get: (function create() {
  _$jscoverage['document.js'][103]++;
  return (function (options) {
  _$jscoverage['document.js'][103]++;
  return new Document(options);
});
}), enumerable: true}});
_$jscoverage['document.js'].source = ["/**"," * Document Module"," *"," * -"," *"," * @param index {String}"," * @param type {String}"," * @param id {String}"," * @param data {Object} When a document is being updated or created the data object should be set."," *"," * @author potanin@UD"," * @date 7/4/13"," * @type {Object}"," */","function Document( index, type, id ) {","","  var Observe = require( 'observe.io' );","","  // Create Instance using ElasticClient as Prototype","  var Instance = Object.create( this, {","    _index: {","      value: index || null,","      enumerable: true,","      writable: true","    },","    _type: {","      value: type || null,","      enumerable: true,","      writable: true","    },","    _id: {","      value: id || null,","      enumerable: true,","      writable: true","    },","  });","","  // Create Elastic","  Observe.Emitter.extend( Instance, [ 'Document', index, type, id ] );","","  // Inherit Document Prototype to Instance","  Observe.utility.inherit( Instance, Document.prototype );","","  // Return Instance","  return Instance;","","}","","/**"," * Prototypal Properties"," *"," */","Object.defineProperties( Document.prototype, {","  commit: {","    /**","     * Force Immediate Save","     *","     */","    value: function commit() {","    },","    configurable: true,","    enumerable: false,","    writable: false","  },","  remove: {","    /**","     * Remove","     *","     */","    value: function remove() {},","    configurable: true,","    enumerable: false,","    writable: false","  },","  content: {","    /**","     * Set Content","     *","     */","    value: function content() {","      console.log( this );","","    },","    configurable: true,","    enumerable: false,","    writable: false","  }","});","","/**"," * Constructor Properties"," *"," */","Object.defineProperties( module.exports = Document, {","  create: {","    /**","     * Create Instance","     *","     * @method create","     * @returns {Function}","     */","    get: function create() {","      return function( options ) { return new Document( options ); }","    },","    enumerable: true","  }","});"];
